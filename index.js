import TelegramBot from "node-telegram-bot-api";
import express from "express";
import Stripe from "stripe";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

dotenv.config();

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
const app = express();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const pdfPath = path.join(__dirname, "pdf/Shopping Guide.pdf");

console.log("üöÄ Telegram-–±–æ—Ç —ñ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É—é—Ç—å...");
console.log("‚úÖ SERVER_URL:", process.env.SERVER_URL);
console.log("‚úÖ STRIPE_WEBHOOK_SECRET:", process.env.STRIPE_WEBHOOK_SECRET ? "OK" : "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π!");
console.log("‚úÖ STRIPE_SECRET_KEY:", process.env.STRIPE_SECRET_KEY ? "OK" : "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π!");
console.log("‚úÖ TELEGRAM_TOKEN:", process.env.TELEGRAM_TOKEN ? "OK" : "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π!");
console.log("üìÑ PDF —à–ª—è—Ö:", pdfPath);
console.log("================================");

app.post("/webhook", express.raw({ type: "application/json" }), (req, res) => {
  console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –≤–∏–∫–ª–∏–∫ /webhook");

  const sig = req.headers["stripe-signature"];
  console.log("üîë Stripe-Signature:", sig ? "–û—Ç—Ä–∏–º–∞–Ω–æ" : "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π");

  let event;

  try {
    event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );
    console.log("‚úÖ Stripe webhook –ø—ñ–¥–ø–∏—Å –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ!");
  } catch (err) {
    console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –ü–Ü–î–ü–ò–°–£ Stripe webhook:", err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  console.log("üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é:", event.type);

  if (event.type === "checkout.session.completed") {
    const session = event.data.object;
    const chatId = session.metadata?.chatId;

    console.log("üí∞ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!");
    console.log("üß† chatId –∑ metadata:", chatId);
    console.log("üìß Email –ø–æ–∫—É–ø—Ü—è:", session.customer_details?.email || "‚Äî");
    console.log("üíµ –°—É–º–∞:", session.amount_total / 100, session.currency.toUpperCase());
    console.log("üìÇ –®–ª—è—Ö –¥–æ PDF:", pdfPath);

    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ chatId –∑ metadata –∞–±–æ –∑ URL
    let finalChatId = chatId;
    
    if (!chatId) {
      console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π chatId —É metadata!");
      console.log("üîç –í—Å—è metadata:", JSON.stringify(session.metadata, null, 2));
      console.log("üîç –®—É–∫–∞—î–º–æ chatId –≤ URL...");
      const successUrl = session.success_url || "";
      try {
        const urlParams = new URL(successUrl).searchParams;
        finalChatId = urlParams.get("chatId");
        console.log("üîç chatId –∑ URL:", finalChatId);
      } catch (e) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É URL:", e.message);
      }
    }
    
    if (!finalChatId) {
      console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ chatId!");
      return res.sendStatus(200);
    }
    
    console.log("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ chatId:", finalChatId);

    if (!fs.existsSync(pdfPath)) {
      console.error("‚ùå –§–∞–π–ª PDF –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º:", pdfPath);
      console.log("üìÅ –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è:", __dirname);
      console.log("üìÅ –í–º—ñ—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:", fs.readdirSync(__dirname));
      return res.sendStatus(200);
    }

    console.log("üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ PDF –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É...");
    console.log("üì§ chatId:", finalChatId);
    
    bot
      .sendDocument(finalChatId, pdfPath, {
        caption: "‚úÖ –î—è–∫—É—é –∑–∞ –æ–ø–ª–∞—Ç—É! üíå\n–û—Å—å —Ç–≤—ñ–π Autumn Winter Shopping Guide 25/26",
      })
      .then(() => console.log("üéâ PDF —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É!"))
      .catch((err) => {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è PDF:", err);
        console.error("‚ùå –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:", JSON.stringify(err, null, 2));
      });
    } else {
      console.log("‚ö†Ô∏è –Ü–Ω—à–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó:", event.type);
    }

  res.sendStatus(200);
});

app.use(express.json());

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  console.log(`üë§ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${chatId} (${msg.from?.username || "no username"})`);

  const amount = parseInt(process.env.PAYMENT_AMOUNT) || 5000; // –≤ —Ü–µ–Ω—Ç–∞—Ö/–∫–æ–ø—ñ–π–∫–∞—Ö

  try {
    console.log("üõ† –°—Ç–≤–æ—Ä—é—î–º–æ Stripe checkout —Å–µ—Å—ñ—é...");

    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      mode: "payment",
      line_items: [
        {
          price_data: {
            currency: "eur",
            product_data: {
              name: "Autumn Winter Shopping Guide 25/26",
            },
            unit_amount: amount,
          },
          quantity: 1,
        },
      ],
      success_url: `${process.env.SERVER_URL}/success?chatId=${chatId}`,
      cancel_url: `${process.env.SERVER_URL}/cancel`,
      metadata: { chatId: String(chatId) },
    });

    console.log("‚úÖ –°–µ—Å—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
    console.log("üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É:", session.url);

    await bot.sendMessage(
      chatId,
      `–ü—Ä–∏–≤—ñ—Ç üëã\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ ¬´Autumn Winter Shopping Guide 25/26¬ª. –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —è –Ω–∞–¥—ñ—à–ª—é PDF-—Ñ–∞–π–ª –ø—Ä—è–º–æ —Å—é–¥–∏ –≤ —á–∞—Ç üíå`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏",
                url: session.url,
              },
            ],
          ],
        },
      }
    );
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Stripe —Å–µ—Å—ñ—ó:", err);
    await bot.sendMessage(chatId, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
});

app.get("/success", (req, res) => {
  console.log("‚úÖ success_url –≤—ñ–¥–∫—Ä–∏—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º");
  res.send("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É Telegram.");
});

app.get("/cancel", (req, res) => {
  console.log("‚ùå cancel_url –≤—ñ–¥–∫—Ä–∏—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º");
  res.send("‚ùå –û–ø–ª–∞—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ —É Telegram.");
});

app.get("/test-pdf", (req, res) => {
  res.send({
    pdfPath: pdfPath,
    exists: fs.existsSync(pdfPath),
    dir: __dirname,
    files: fs.readdirSync(__dirname).join(", "),
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, "0.0.0.0", () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê Webhook endpoint: ${process.env.SERVER_URL}/webhook`);
});
